/*
 * Copyright (c) 2005 Qwest, Inc. All Rights Reserved.
 *
 * This software is the confidential and proprietary information of
 * Qwest, Inc. ("Confidential Information").  You shall not disclose
 * such Confidential Information and shall use it only in accordance
 * with the terms of the license agreement you entered into with Qwest.
 *
 * QWEST MAKES NO REPRESENTATIONS OR WARRANTIES ABOUT THE SUITABILITY OF THE
 * SOFTWARE, EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
 * PURPOSE, OR NON-INFRINGEMENT. QWEST SHALL NOT BE LIABLE FOR ANY DAMAGES
 * SUFFERED BY LICENSEE AS A RESULT OF USING, MODIFYING OR DISTRIBUTING
 * THIS SOFTWARE OR ITS DERIVATIVES.
 */

package com.qwest.cms.utils;

/**
 * Description of this class.
 * 
 * @version $Id: ParseX509Certificate.java,v 1.1.3.1 2007-02-09 07:39:08-07 cmsadmin dev_21_00_04 $
 * @author dxlamb
 */
import java.io.*;
import java.math.BigInteger;
import java.security.*;
import java.security.cert.CertificateException;
import java.security.cert.CertificateFactory;
import java.security.cert.X509Certificate;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Enumeration;
import java.util.Hashtable;

import org.apache.oro.text.regex.*;

import cryptix.util.mime.Base64InputStream;

public class ParseX509Certificate
{
  private X509Certificate     x509cert;
  private Principal           subject;
  private Hashtable           subjectTable;
  private Principal           issuer;
  private Hashtable           issuerTable;
  private String              notDefined;
  private String              rawCert;

  public ParseX509Certificate(String s)
      throws CertificateException, IOException
  { //s="MIIFHjCCBAagAwIBAgIQI3Ake9WWamOrD8ESavA4CTANBgkqhkiG9w0BAQUFADCBsDELMAkGA1UEBhMCVVMxFzAVBgNVBAoTDlZlcmlTaWduLCBJbmMuMR8wHQYDVQQLExZWZXJpU2lnbiBUcnVzdCBOZXR3b3JrMTswOQYDVQQLEzJUZXJtcyBvZiB1c2UgYXQgaHR0cHM6Ly93d3cudmVyaXNpZ24uY29tL3JwYSAoYykwNTEqMCgGA1UEAxMhVmVyaVNpZ24gQ2xhc3MgMyBTZWN1cmUgU2VydmVyIENBMB4XDTA4MDEwODAwMDAwMFoXDTExMDEwNzIzNTk1OVowgZExCzAJBgNVBAYTAlVTMREwDwYDVQQIEwhDb2xvcmFkbzEPMA0GA1UEBxQGRGVudmVyMTAwLgYDVQQKFCdRd2VzdCBDb21tdW5pY2F0aW9ucyBJbnRlcm5hdGlvbmFsIEluYy4xEDAOBgNVBAsUB0lNQS1FREkxGjAYBgNVBAMUEWltYXByb2QucXdlc3QuY29tMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDwBUPBmwe1D0B6+hImgu4f8ZluYiegWAW/9KRh74IoLbMgmkgtTzb8HnW/5SanUvWW6cYmanEZR4g9qj9BQlfs50n00PEVhg9XmCzYQoXuJ44TZLcp1aPYRpIbMxhM/Dfyjqg06PfMMlB8pbRY61dkFhTwICC7sZFg4ZGebgGEoQIDAQABo4IB0zCCAc8wCQYDVR0TBAIwADALBgNVHQ8EBAMCBaAwRAYDVR0fBD0wOzA5oDegNYYzaHR0cDovL1NWUlNlY3VyZS1jcmwudmVyaXNpZ24uY29tL1NWUlNlY3VyZTIwMDUuY3JsMEQGA1UdIAQ9MDswOQYLYIZIAYb4RQEHFwMwKjAoBggrBgEFBQcCARYcaHR0cHM6Ly93d3cudmVyaXNpZ24uY29tL3JwYTAdBgNVHSUEFjAUBggrBgEFBQcDAQYIKwYBBQUHAwIwHwYDVR0jBBgwFoAUb+yvoN2KpO/1KhBnLT9VgrzX7yUweQYIKwYBBQUHAQEEbTBrMCQGCCsGAQUFBzABhhhodHRwOi8vb2NzcC52ZXJpc2lnbi5jb20wQwYIKwYBBQUHMAKGN2h0dHA6Ly9TVlJTZWN1cmUtYWlhLnZlcmlzaWduLmNvbS9TVlJTZWN1cmUyMDA1LWFpYS5jZXIwbgYIKwYBBQUHAQwEYjBgoV6gXDBaMFgwVhYJaW1hZ2UvZ2lmMCEwHzAHBgUrDgMCGgQUS2u5KJYGDLvQUjibKaxLB4shBRgwJhYkaHR0cDovL2xvZ28udmVyaXNpZ24uY29tL3ZzbG9nbzEuZ2lmMA0GCSqGSIb3DQEBBQUAA4IBAQBEeUBuu+9pPmqVJgZSusS9lILVatSDDHXqNlEA+x4ZO93uXclYdbiTgTGL7nA2HaUja6oaSv8jVNmHfR2+9G+4lhT4PeOp5ObeZ5roVK7xdxldpJeT1teBd+wSm4l3WKt7qtRr2RwKZhHsemG7evvhOQm8+bQFnOjtQptyPjv4+L7tWsE542p9BPS66bbZ8ITY926MsgOkrfwdizQs1lyDJqKzatbmUwVwcIvFt/NJM4Wd/R+aKGi7wpuGTaPB+6biW7Nxd6qFuNKtsPJYmBxt+7wiyNDScveuWhjJ9iK/ge1aSouFfnavpqapuaY8OQe1Tmu3J0OGuQqRr4l62bvC" ;
    //String s1="MIIFHjCCBAagAwIBAgIQI3Ake9WWamOrD8ESavA4CTANBgkqhkiG9w0BAQUFADCBsDELMAkGA1UEBhMCVVMxFzAVBgNVBAoTDlZlcmlTaWduLCBJbmMuMR8wHQYDVQQLExZWZXJpU2lnbiBUcnVzdCBOZXR3b3JrMTswOQYDVQQLEzJUZXJtcyBvZiB1c2UgYXQgaHR0cHM6Ly93d3cudmVyaXNpZ24uY29tL3JwYSAoYykwNTEqMCgGA1UEAxMhVmVyaVNpZ24gQ2xhc3MgMyBTZWN1cmUgU2VydmVyIENBMB4XDTA4MDEwODAwMDAwMFoXDTExMDEwNzIzNTk1OVowgZExCzAJBgNVBAYTAlVTMREwDwYDVQQIEwhDb2xvcmFkbzEPMA0GA1UEBxQGRGVudmVyMTAwLgYDVQQKFCdRd2VzdCBDb21tdW5pY2F0aW9ucyBJbnRlcm5hdGlvbmFsIEluYy4xEDAOBgNVBAsUB0lNQS1FREkxGjAYBgNVBAMUEWltYXByb2QucXdlc3QuY29tMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDwBUPBmwe1D0B6+hImgu4f8ZluYiegWAW/9KRh74IoLbMgmkgtTzb8HnW/5SanUvWW6cYmanEZR4g9qj9BQlfs50n00PEVhg9XmCzYQoXuJ44TZLcp1aPYRpIbMxhM/Dfyjqg06PfMMlB8pbRY61dkFhTwICC7sZFg4ZGebgGEoQIDAQABo4IB0zCCAc8wCQYDVR0TBAIwADALBgNVHQ8EBAMCBaAwRAYDVR0fBD0wOzA5oDegNYYzaHR0cDovL1NWUlNlY3VyZS1jcmwudmVyaXNpZ24uY29tL1NWUlNlY3VyZTIwMDUuY3JsMEQGA1UdIAQ9MDswOQYLYIZIAYb4RQEHFwMwKjAoBggrBgEFBQcCARYcaHR0cHM6Ly93d3cudmVyaXNpZ24uY29tL3JwYTAdBgNVHSUEFjAUBggrBgEFBQcDAQYIKwYBBQUHAwIwHwYDVR0jBBgwFoAUb+yvoN2KpO/1KhBnLT9VgrzX7yUweQYIKwYBBQUHAQEEbTBrMCQGCCsGAQUFBzABhhhodHRwOi8vb2NzcC52ZXJpc2lnbi5jb20wQwYIKwYBBQUHMAKGN2h0dHA6Ly9TVlJTZWN1cmUtYWlhLnZlcmlzaWduLmNvbS9TVlJTZWN1cmUyMDA1LWFpYS5jZXIwbgYIKwYBBQUHAQwEYjBgoV6gXDBaMFgwVhYJaW1hZ2UvZ2lmMCEwHzAHBgUrDgMCGgQUS2u5KJYGDLvQUjibKaxLB4shBRgwJhYkaHR0cDovL2xvZ28udmVyaXNpZ24uY29tL3ZzbG9nbzEuZ2lmMA0GCSqGSIb3DQEBBQUAA4IBAQBEeUBuu+9pPmqVJgZSusS9lILVatSDDHXqNlEA+x4ZO93uXclYdbiTgTGL7nA2HaUja6oaSv8jVNmHfR2+9G+4lhT4PeOp5ObeZ5roVK7xdxldpJeT1teBd+wSm4l3WKt7qtRr2RwKZhHsemG7evvhOQm8+bQFnOjtQptyPjv4+L7tWsE542p9BPS66bbZ8ITY926MsgOkrfwdizQs1lyDJqKzatbmUwVwcIvFt/NJM4Wd/R+aKGi7wpuGTaPB+6biW7Nxd6qFuNKtsPJYmBxt+7wiyNDScveuWhjJ9iK/ge1aSouFfnavpqapuaY8OQe1Tmu3J0OGuQqRr4l62bvC";
    rawCert = s;
    x509cert = null;
    subject = null;
    subjectTable = null;
    issuer = null;
    issuerTable = null;
    notDefined = "NotDefined";
    InputStream is = new ByteArrayInputStream(s.trim().getBytes());
    System.out.println("input stream ..457.."+is.toString());
    Base64InputStream base64inputstream = new Base64InputStream(is);
    CertificateFactory cf = CertificateFactory.getInstance("X.509");
    System.out.println("certificate factory instance....."+cf.toString());
    x509cert = (X509Certificate)cf.generateCertificate(base64inputstream);
    is.close();
    
/*    File filename=new File(s);System.out.println(" filename.exists()  "+filename.exists());
    if(filename.exists()){System.out.println("this is file");
        FileInputStream fis = new FileInputStream(filename);
        BufferedInputStream bis = new BufferedInputStream(fis);
        CertificateFactory cf = CertificateFactory.getInstance("X.509");
        x509cert = (X509Certificate)cf.generateCertificate(bis);
          fis.close();
          bis.close();
        }else{System.out.println(" ****************************this is not file******");
*/        
        
//        InputStream is = new ByteArrayInputStream(s.trim().getBytes());
//        Base64InputStream base64inputstream = new Base64InputStream(is);
//        int i = ((InputStream) (obj)).available();
//        byte abyte0[] = new byte[i];
//        base64inputstream.read(abyte0, 0, abyte0.length);
        

       
  
   /*// File filename=new File("C:/RMS/certsample/dub.cer");
    // FileOutputStream fout=new FileOutputStream(new File("C:/RMS/certsample/dub.txt"));
    FileInputStream fis = new FileInputStream(filename);
    InputStream is =new FileInputStream(filename);
    //InputStream is = new ByteArrayInputStream(s.trim().getBytes());
    Base64InputStream base64inputstream = new Base64InputStream(is);
    //Base64InputStream base64inputstream = new Base64InputStream(fis);
//    int i = ((InputStream) (obj)).available();
//    byte abyte0[] = new byte[i];
//    base64inputstream.read(abyte0, 0, abyte0.length);
    BufferedInputStream bis = new BufferedInputStream(fis);*/
   
  }
  public ParseX509Certificate(File f)
  throws CertificateException, IOException,Exception
 	{ 
      	x509cert = null;
      	subject = null;
      	subjectTable = null;
      	issuer = null;
      	issuerTable = null;
      	notDefined = "NotDefined";
      	String filePath=f.getPath();
       	if(filePath.endsWith(".p12") || filePath.endsWith(".pfx") || filePath.endsWith(".p7b")||filePath.endsWith("jks")){           
            String format = "PKCS12";   
            if(filePath.endsWith("jks"))
             		format = "JKS";
            
            KeyStore keyStore = KeyStore.getInstance(format);
            FileInputStream fis = new FileInputStream(f);
            keyStore.load(fis,null);
            Enumeration e = keyStore.aliases();
            while(e.hasMoreElements())
            {            	
            		String aliasName = (String)e.nextElement();                	
                	X509Certificate cert =( X509Certificate )keyStore.getCertificate(aliasName);                	
                	if( cert != null )
                	{     x509cert = (X509Certificate) cert;             		
       	              	}          	
            	       	
        	}
            
        }else{ 
      	FileInputStream fis = new FileInputStream(f);
      	BufferedInputStream bis = new BufferedInputStream(fis);
      	CertificateFactory cf = CertificateFactory.getInstance("X.509");
      	x509cert = (X509Certificate)cf.generateCertificate(bis);
      	fis.close();
        }
		}
  
  public  ParseX509Certificate(X509Certificate cert)
  throws CertificateException, IOException
	{
	  
	  rawCert = "";
	
	  subject = null;
	  subjectTable = null;
	  issuer = null;
	  issuerTable = null;
	  notDefined = "NotDefined";
	  x509cert = cert;
	}
 
  public X509Certificate getX509cert(){
	  return this.x509cert;
  }

  private String deleteChars(String s, String s1)
  {
    char ac[] = s1.toCharArray();
    return deleteChars(s, ac);
  }

  private String deleteChars(String s, char ac[])
  {
    char ac1[] = s.toCharArray();
    int i = 0;
    char ac2[] = new char[ac1.length];
    for (int j = 0; j < ac1.length; j++)
    {
      for (int k = 0; k < ac.length; k++)
      {
        if (ac1[j] != ac[k])
          continue;
        ac1[j] = '\0';
        break;
      }
      if (ac1[j] != 0)
      {
        ac2[i] = ac1[j];
        i++;
      }
    }
    return new String(ac2, 0, i);
  }

  public String getIssuer(String s)
  {
    if (issuer == null)
      getIssuerDN();
    String s1 = (String) issuerTable.get(s);
    return s1.equals(notDefined) ? null : s1;
  }

  public String getIssuerC()
  {
    if (issuer == null)
      getIssuerDN();
    String s = (String) issuerTable.get("C");
    return s.equals(notDefined) ? null : s;
  }

  public String getIssuerCN()
  {
    if (issuer == null)
      getIssuerDN();
    String s = (String) issuerTable.get("CN");
    return s.equals(notDefined) ? null : s;
  }

  public String getIssuerDN()
  {
    if (issuer == null)
    {
      issuer = x509cert.getIssuerDN();
      issuerTable = new Hashtable();
      initHashtable(issuerTable);
      String s = issuer.toString();
      Pattern apattern[] = null;
      Pattern pattern = null;
      Perl5Compiler perl5compiler = new Perl5Compiler();
      try
      {
        apattern = new Pattern[2];
        apattern[0] = perl5compiler.compile("[A-Za-z]+=[^,]+");
        apattern[1] = perl5compiler
            .compile("[A-Za-z]+=\"(?:[^\"\\\\]+|\\\\\")*\"");
        pattern = perl5compiler.compile("\\\\\"");
      }
      catch (MalformedPatternException malformedpatternexception)
      {
        System.out.println("Bad Pattern!");
        System.out.println(malformedpatternexception.getMessage());
      }
      Perl5Matcher perl5matcher = new Perl5Matcher();
      PatternMatcherInput patternmatcherinput = new PatternMatcherInput(s);
      StringSubstitution stringsubstitution = new StringSubstitution("\"");
      for (int i = 0; i < apattern.length; i++)
      {
        while (perl5matcher.contains(patternmatcherinput, apattern[i]))
        {
          MatchResult matchresult = perl5matcher.getMatch();
          String s1 = matchresult.toString();
          String s2 = s1.substring(0, s1.indexOf('='));
          String s3 = s1.substring(s1.indexOf('=') + 1);
          s3 = Util.substitute(perl5matcher, pattern, stringsubstitution, s3,
              -1);
          if (s3.charAt(0) == '"')
            s3 = s3.substring(1, s3.length() - 1);
          issuerTable.put(s2, s3);
        }
        patternmatcherinput.setCurrentOffset(patternmatcherinput
            .getBeginOffset());
      }
    }
    return issuer.toString();
  }

  public String getIssuerEmail()
  {
    if (issuer == null)
      getIssuerDN();
    String s = (String) issuerTable.get("EmailAddress");
    return s.equals(notDefined) ? null : s;
  }

  public String getIssuerL()
  {
    if (issuer == null)
      getIssuerDN();
    String s = (String) issuerTable.get("L");
    return s.equals(notDefined) ? null : s;
  }

  public String getIssuerO()
  {
    if (issuer == null)
      getIssuerDN();
    String s = (String) issuerTable.get("O");
    return s.equals(notDefined) ? null : s;
  }

  public String getIssuerOU()
  {
    if (issuer == null)
      getIssuerDN();
    String s = (String) issuerTable.get("OU");
    return s.equals(notDefined) ? null : s;
  }

  public String getIssuerST()
  {
    if (issuer == null)
      getIssuerDN();
    String s = (String) issuerTable.get("ST");
    return s.equals(notDefined) ? null : s;
  }

  public String getNotAfter()
  {
      
      return new SimpleDateFormat("MM-dd-yyyy HH:mm:ss").format(x509cert.getNotAfter());
   // return x509cert.getNotAfter().toString();
  }

  public String getNotBefore()
  { 
      return new SimpleDateFormat("MM-dd-yyyy HH:mm:ss").format(x509cert.getNotBefore());
    //return x509cert.getNotBefore().toString();
  }

  public String getPublicKey()
  {
    java.security.PublicKey publickey = x509cert.getPublicKey();
    byte abyte0[] = publickey.getEncoded();
    System.out.println(publickey.toString());
    if (abyte0 != null && abyte0.length > 0)
    {
      BigInteger biginteger = new BigInteger(abyte0);
      StringBuffer stringbuffer = new StringBuffer(biginteger.toString(16)
          .substring(44));
      int i = stringbuffer.length() / 4;
      for (int j = 1; j < i; j++)
        if (j % 10 != 0)
          stringbuffer.insert((j * 4 + j) - 1, ' ');
        else
          stringbuffer.insert((j * 4 + j) - 1, '\n');
      return stringbuffer.toString().toUpperCase();
    }
    else
    {
      return publickey.toString().toUpperCase();
    }
  }

  public String getSerialNumber()
  {
    return x509cert.getSerialNumber().toString(16).toUpperCase();
  }

  public String getSerialNumber(int i, char c)
  {
    StringBuffer stringbuffer = new StringBuffer(getSerialNumber());
    int j = stringbuffer.length() / i;
    for (int k = 1; k < j; k++)
      stringbuffer.insert((k * i + k) - 1, c);
    return stringbuffer.toString();
  }

  public String getSigAlgName()
  {
    return x509cert.getSigAlgName();
  }

  public String getSigAlgOID()
  {
    return x509cert.getSigAlgOID();
  }

  public String getSigAlgParams()
  {
    byte abyte0[] = x509cert.getSigAlgParams();
    String s = null;
    try
    {
      AlgorithmParameters algorithmparameters = AlgorithmParameters
          .getInstance(getSigAlgName());
      s = algorithmparameters.getAlgorithm();
    }
    catch (NoSuchAlgorithmException _ex)
    {
      System.out.println("Caught NoSuchAlgorithmException");
    }
    return s;
  }

  public String getSignature()
  {
    byte abyte0[] = x509cert.getSignature();
    if (abyte0 != null && abyte0.length > 0)
    {
      BigInteger biginteger = new BigInteger(abyte0);
      return biginteger.toString(16);
    }
    else
    {
      return null;
    }
  }

  public String getSubject(String s)
  {
    if (subject == null)
      getSubjectDN();
    String s1 = (String) subjectTable.get(s);
    return s1.equals(notDefined) ? null : s1;
  }

  public String getSubjectC()
  {
    if (subject == null)
      getSubjectDN();
    String s = (String) subjectTable.get("C");
    return s.equals(notDefined) ? null : s;
  }

  public String getSubjectCN()
  {
    if (subject == null)
      getSubjectDN();
    String s = (String) subjectTable.get("CN");
    return s.equals(notDefined) ? null : s;
  }

  public String getSubjectDN()
  {
    if (subject == null)
    {
      subject = x509cert.getSubjectDN();
      subjectTable = new Hashtable();
      initHashtable(subjectTable);
      String s = subject.toString();
      Pattern apattern[] = null;
      Pattern pattern = null;
      Perl5Compiler perl5compiler = new Perl5Compiler();
      try
      {
        apattern = new Pattern[2];
        apattern[0] = perl5compiler.compile("[A-Za-z]+=[^,]+");
        apattern[1] = perl5compiler
            .compile("[A-Za-z]+=\"(?:[^\"\\\\]+|\\\\\")*\"");
        pattern = perl5compiler.compile("\\\\\"");
      }
      catch (MalformedPatternException malformedpatternexception)
      {
        System.out.println("Bad Pattern!");
        System.out.println(malformedpatternexception.getMessage());
      }
      Perl5Matcher perl5matcher = new Perl5Matcher();
      PatternMatcherInput patternmatcherinput = new PatternMatcherInput(s);
      StringSubstitution stringsubstitution = new StringSubstitution("\"");
      for (int i = 0; i < apattern.length; i++)
      {
        while (perl5matcher.contains(patternmatcherinput, apattern[i]))
        {
          MatchResult matchresult = perl5matcher.getMatch();
          String s1 = matchresult.toString();
          String s2 = s1.substring(0, s1.indexOf('='));
          String s3 = s1.substring(s1.indexOf('=') + 1);
          s3 = Util.substitute(perl5matcher, pattern, stringsubstitution, s3,
              -1);
          if (s3.charAt(0) == '"')
            s3 = s3.substring(1, s3.length() - 1);
          subjectTable.put(s2, s3);
        }
        patternmatcherinput.setCurrentOffset(patternmatcherinput
            .getBeginOffset());
      }
    }
    return subject.toString();
  }

  public String getSubjectEmail()
  {
    if (subject == null)
      getSubjectDN();
    String s = (String) subjectTable.get("EmailAddress");
    return s.equals(notDefined) ? null : s;
  }

  public String getSubjectL()
  {
    if (subject == null)
      getSubjectDN();
    String s = (String) subjectTable.get("L");
    return s.equals(notDefined) ? null : s;
  }

  public String getSubjectO()
  {
    if (subject == null)
      getSubjectDN();
    String s = (String) subjectTable.get("O");
    return s.equals(notDefined) ? null : s;
  }

  public String getSubjectOU()
  {
    if (subject == null)
      getSubjectDN();
    String s = (String) subjectTable.get("OU");
    return s.equals(notDefined) ? null : s;
  }

  public String getSubjectST()
  {
    if (subject == null)
      getSubjectDN();
    String s = (String) subjectTable.get("ST");
    return s.equals(notDefined) ? null : s;
  }

  public String getVersion()
  {
    return "0x" + Integer.toString(x509cert.getVersion(), 16);
  }

  public int hashCode()
  {
    return x509cert.hashCode();
  }

  private void initHashtable(Hashtable hashtable)
  {
    hashtable.put("EmailAddress", notDefined);
    hashtable.put("CN", notDefined);
    hashtable.put("OU", notDefined);
    hashtable.put("O", notDefined);
    hashtable.put("L", notDefined);
    hashtable.put("ST", notDefined);
    hashtable.put("C", notDefined);
  }

  public static void main(String args[]) throws CertificateException,
      FileNotFoundException, IOException
  {
   // ParseX509Certificate parsex509certificate = new ParseX509Certificate("C:/RMS/certsample/dub.cer");
    ParseX509Certificate parsex509certificate = new ParseX509Certificate("MIIFHjCCBAagAwIBAgIQI3Ake9WWamOrD8ESavA4CTANBgkqhkiG9w0BAQUFADCBsDELMAkGA1UEBhMCVVMxFzAVBgNVBAoTDlZlcmlTaWduLCBJbmMuMR8wHQYDVQQLExZWZXJpU2lnbiBUcnVzdCBOZXR3b3JrMTswOQYDVQQLEzJUZXJtcyBvZiB1c2UgYXQgaHR0cHM6Ly93d3cudmVyaXNpZ24uY29tL3JwYSAoYykwNTEqMCgGA1UEAxMhVmVyaVNpZ24gQ2xhc3MgMyBTZWN1cmUgU2VydmVyIENBMB4XDTA4MDEwODAwMDAwMFoXDTExMDEwNzIzNTk1OVowgZExCzAJBgNVBAYTAlVTMREwDwYDVQQIEwhDb2xvcmFkbzEPMA0GA1UEBxQGRGVudmVyMTAwLgYDVQQKFCdRd2VzdCBDb21tdW5pY2F0aW9ucyBJbnRlcm5hdGlvbmFsIEluYy4xEDAOBgNVBAsUB0lNQS1FREkxGjAYBgNVBAMUEWltYXByb2QucXdlc3QuY29tMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDwBUPBmwe1D0B6+hImgu4f8ZluYiegWAW/9KRh74IoLbMgmkgtTzb8HnW/5SanUvWW6cYmanEZR4g9qj9BQlfs50n00PEVhg9XmCzYQoXuJ44TZLcp1aPYRpIbMxhM/Dfyjqg06PfMMlB8pbRY61dkFhTwICC7sZFg4ZGebgGEoQIDAQABo4IB0zCCAc8wCQYDVR0TBAIwADALBgNVHQ8EBAMCBaAwRAYDVR0fBD0wOzA5oDegNYYzaHR0cDovL1NWUlNlY3VyZS1jcmwudmVyaXNpZ24uY29tL1NWUlNlY3VyZTIwMDUuY3JsMEQGA1UdIAQ9MDswOQYLYIZIAYb4RQEHFwMwKjAoBggrBgEFBQcCARYcaHR0cHM6Ly93d3cudmVyaXNpZ24uY29tL3JwYTAdBgNVHSUEFjAUBggrBgEFBQcDAQYIKwYBBQUHAwIwHwYDVR0jBBgwFoAUb+yvoN2KpO/1KhBnLT9VgrzX7yUweQYIKwYBBQUHAQEEbTBrMCQGCCsGAQUFBzABhhhodHRwOi8vb2NzcC52ZXJpc2lnbi5jb20wQwYIKwYBBQUHMAKGN2h0dHA6Ly9TVlJTZWN1cmUtYWlhLnZlcmlzaWduLmNvbS9TVlJTZWN1cmUyMDA1LWFpYS5jZXIwbgYIKwYBBQUHAQwEYjBgoV6gXDBaMFgwVhYJaW1hZ2UvZ2lmMCEwHzAHBgUrDgMCGgQUS2u5KJYGDLvQUjibKaxLB4shBRgwJhYkaHR0cDovL2xvZ28udmVyaXNpZ24uY29tL3ZzbG9nbzEuZ2lmMA0GCSqGSIb3DQEBBQUAA4IBAQBEeUBuu+9pPmqVJgZSusS9lILVatSDDHXqNlEA+x4ZO93uXclYdbiTgTGL7nA2HaUja6oaSv8jVNmHfR2+9G+4lhT4PeOp5ObeZ5roVK7xdxldpJeT1teBd+wSm4l3WKt7qtRr2RwKZhHsemG7evvhOQm8+bQFnOjtQptyPjv4+L7tWsE542p9BPS66bbZ8ITY926MsgOkrfwdizQs1lyDJqKzatbmUwVwcIvFt/NJM4Wd/R+aKGi7wpuGTaPB+6biW7Nxd6qFuNKtsPJYmBxt+7wiyNDScveuWhjJ9iK/ge1aSouFfnavpqapuaY8OQe1Tmu3J0OGuQqRr4l62bvC") ;
    System.out.println("Version 22==> "+parsex509certificate.getVersion());
    System.out.println("SubjectDN : "+parsex509certificate.getSubjectDN());
    System.out.println("Subject :EmailAddress "+parsex509certificate.getSubject("EmailAddress"));
    System.out.println("Subject :CN " +parsex509certificate.getSubject("CN"));
    System.out.println("Subject :OU " +parsex509certificate.getSubject("OU"));
    System.out.println("Subject :O " +parsex509certificate.getSubject("O"));
    System.out.println("Subject :L " +parsex509certificate.getSubject("L"));
    System.out.println("Subject :ST " +parsex509certificate.getSubject("ST"));
    System.out.println("Subject :C " +parsex509certificate.getSubject("C"));
    System.out.println("IssuerDN: " +parsex509certificate.getIssuerDN());
    System.out.println("Issuer:EmailAddress " +parsex509certificate.getIssuer("EmailAddress"));
    System.out.println("Issuer :CN" +parsex509certificate.getIssuer("CN"));
    System.out.println("Issuer :OU " +parsex509certificate.getIssuer("OU"));
    System.out.println("Issuer :O  " +parsex509certificate.getIssuer("O"));
    System.out.println("Issuer :L " +parsex509certificate.getIssuer("L"));
    System.out.println("Issuer :ST " +parsex509certificate.getIssuer("ST"));
    System.out.println("Issuer :C " +parsex509certificate.getIssuer("C"));
    System.out.println("Version: "+parsex509certificate.getVersion());
    System.out.println("SerialNumber: "+parsex509certificate.getSerialNumber(4, ' '));
    System.out.println("SigAlgOID :"+parsex509certificate.getSigAlgOID());
    System.out.println("from date: "+parsex509certificate.getNotBefore());
    System.out.println("To date: "+parsex509certificate.getNotAfter());
    System.out.println("hashcode: "+parsex509certificate.hashCode());
    System.out.println("SigAlgName: "+parsex509certificate.getSigAlgName());
    System.out.println("SigAlgParams: "+parsex509certificate.getSigAlgParams());
    System.out.println("Signature: "+parsex509certificate.getSignature());
    System.out.println();
    System.out.println("public Key: "+parsex509certificate.getPublicKey());
    System.out.println();
    System.out.println("cetificate : "+parsex509certificate.toString());
  }

  public String toString()
  {
    X509Certificate x509certificate = x509cert;
    return x509certificate.toString();
  }

  /**
   * @return Returns the rawCert.
   */
  public String getRawCert()
  {
    return rawCert;
  }
}
